---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yangfan
--- DateTime: 2021/11/16 12:12
---四维向量类
local setmetatable = setmetatable
local luaMath = math
local getLuaDataType = type

---@class vector4
---@field x number
---@field y number
---@field z number
---@field w number
local vector4 = {
    __type = 'vector4'
}

---@public
---@param x number
---@param y number
---@param z number
---@param w number
---@return vector4
function vector4.new(x,y,z,w)
    local vec4 = {
        x = x,
        y = y,
        z = z,
        w = w,
    }
    setmetatable(vec4,vector4)
    return vec4
end

---@public
---@return vector4
function vector4.zero()
    return vector4.new(0,0,0,0)
end

---@public
---@return vector4
function vector4.one()
    return vector4.new(1,1,1,1)
end

---@public 点乘
---@param vec1 vector3
---@param vec2 vector3
---@return number
function vector4.dot(vec1,vec2)
    return vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z + vec1.w * vec2.w
end

---@public 标准化
------@param vector vector3
---@return vector3
function vector4.normalize(vector)
    local length = vector4.magnitude(vector)
    return vector / length
end

---@public
---@param vector vector3
---@return number
function vector4.sqMagnitude(vector)
    return vector.x * vector.x + vector.y * vector.y + vector.z * vector.z + vector.w * vector.w
end

---@public
---@param vector vector4
---@return number
function vector4.magnitude(vector)
    local sqMagnitude = vector.x * vector.x + vector.y * vector.y + vector.z * vector.z + vector.w * vector.w
    return luaMath.sqrt(sqMagnitude)
end

---@public 齐次除法
---@param vector
---@return vector3
function vector4.homogeneousDiv(vector)
    local w = vector.w ~= 0 and vector.w or 1
    return vector3.new(vector.x / w,vector.y / w,vector.z / w)
end

---@public 转为三维时，默认进行一次齐次除法
function vector4:toVector3()
    return vector4.homogeneousDiv(self)
end

-------------运算符重载------------------------------

vector4.__index = vector4

vector4.__add = function(a,b)
    local w1 = a.w or 0
    local w2 = b.w or 0
    return vector4.new(a.x + b.x,a.y + b.y,a.z + b.z,w1 + w2)
end

vector4.__sub = function(a,b)
    local w1 = a.w or 0
    local w2 = b.w or 0
    return vector4.new(a.x - b.x,a.y - b.y,a.z - b.z,w1 - w2)
end


--重载乘法运算，只支持与标量的乘法
vector4.__mul = function(a,b)
    if getLuaDataType(a) == 'number' then
        return vector4.new(b.x * a,b.y * a,b.z * a,b.w * a)
    elseif getLuaDataType(b) == 'number' then
        return vector4.new(a.x * b,a.y * b,a.z * b,a.w * b)
    else
        return a
    end
end

--重载除法运算，只支持与标量的除法
vector4.__div = function(a,b)
    if getLuaDataType(a) == 'number' then
        if a == 0 then a = 1 end
        return vector4.new(b.x / a,b.y / a,b.z / a,b.w / a)
    elseif getLuaDataType(b) == 'number' then
        if b == 0 then b = 1 end
        return vector4.new(a.x / b,a.y / b,a.z / b,a.w / b)
    else
        return a
    end
end

vector4.__eq = function(a,b)
    local v = a - b
    local length = vector4.sqMagnitude(v)
    return length < 1e-10
end

vector4.__unm = function(a)
    return vector4.new(a.x * -1,a.y * -1,a.z * -1,a.w * -1)
end

vector4.__tostring = function(a)
    local str = table.concat({'(x = ',a.x,' y = ',a.y,' z = ',a.z,' w = ',a.w,' )'},'')
    return str
end

---@type vector4
_G["vector4"] = vector4