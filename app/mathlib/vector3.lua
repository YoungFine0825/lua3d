---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yangfan
--- DateTime: 2021/11/15 20:37
---三维向量类

local setmetatable = setmetatable
local luaMath = math
local getLuaDataType = type

---@class vector3
---@field x number
---@field y number
---@field z number
local vector3 = {
    __type = 'vector3'
}

---@public
---@param x number
---@param y number
---@param z number
---@return vector3
function vector3.new(x,y,z)
    local vec3 = {
        x = x,
        y = y,
        z = z
    }
    setmetatable(vec3,vector3)
    return vec3
end

---@public
---@return vector3
function vector3.zero()
    return vector3.new(0,0,0)
end

---@public
---@return vector3
function vector3.one()
    return vector3.new(1,1,1)
end

---@public
---@return vector3
function vector3.up()
    return vector3.new(0,1,0)
end

---@public
---@return vector3
function vector3.down()
    return vector3.new(0,-1,0)
end

---@public
---@return vector3
function vector3.right()
    return vector3.new(1,0,0)
end

---@public
---@return vector3
function vector3.left()
    return vector3.new(-1,0,0)
end

---@public 我们使用的是右手Y-up坐标系，所以forward方向为负z方向
---@return vector3
function vector3.forward()
    return vector3.new(0,0,-1)
end

---@public 我们使用的是右手Y-up坐标系，所以back方向为正z方向
---@return vector3
function vector3.back()
    return vector3.new(0,0,1)
end

---@public 点乘
---@param vec1 vector3
---@param vec2 vector3
---@return number
function vector3.dot(vec1,vec2)
    return vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z
end

---@public 叉乘
---@param vec1 vector3
---@param vec2 vector3
---@return vector3
function vector3.cross(vec1,vec2)
    local x = vec1.y * vec2.z - vec1.z * vec2.y
    local y = vec1.z * vec2.x - vec1.x * vec2.z
    local z = vec1.x * vec2.y - vec1.y * vec2.x
    return vector3.new(x,y,z)
end

---@public 标准化
------@param vector vector3
---@return vector3
function vector3.normalize(vector)
    local length = vector3.magnitude(vector)
    return vector / length
end

---@public
---@param vector vector3
---@return number
function vector3.sqMagnitude(vector)
    return vector.x * vector.x + vector.y * vector.y + vector.z * vector.z
end

---@public
---@param vector vector3
---@return number
function vector3.magnitude(vector)
    local sqMagnitude = vector.x * vector.x + vector.y * vector.y + vector.z * vector.z
    return luaMath.sqrt(sqMagnitude)
end

---@public 球面线性差值
function vector3.slerp(vec1,vec2,t)
    local theta = luaMath.acos(vector3.dot( vector3.normalize(vec1),vector3.normalize(vec2) ))
    local sin = luaMath.sin
    local a = sin( (1 - t) * theta) / sin(theta)
    local b = sin(t * theta) / sin(theta)
    return a * vec1 + b * vec2
end

---@public
---@return vector2
function vector3:toVector2()
    return vector2.new(self.x,self.y)
end

---@public 专为四维时，w默认为0。
---@return vector4
function vector3:toVector4(w)
    return vector4.new(self.x,self.y,self.z,w or 0)
end

-------------运算符重载------------------------------

vector3.__index = vector3

vector3.__add = function(a,b)
    return vector3.new(a.x + b.x,a.y + b.y,a.z + b.z)
end

vector3.__sub = function(a,b)
    return vector3.new(a.x - b.x,a.y - b.y,a.z - b.z)
end

--重载乘法运算，只支持与标量的乘法
vector3.__mul = function(a,b)
    if getLuaDataType(a) == 'number' then
        return vector3.new(b.x * a,b.y * a,b.z * a)
    elseif getLuaDataType(b) == 'number' then
        return vector3.new(a.x * b,a.y * b,a.z * b)
    else
        return a
    end
end

--重载除法运算，只支持与标量的除法
vector3.__div = function(a,b)
    if getLuaDataType(a) == 'number' then
        if a == 0 then a = 1 end
        return vector3.new(b.x / a,b.y / a,b.z / a)
    elseif getLuaDataType(b) == 'number' then
        if b == 0 then b = 1 end
        return vector3.new(a.x / b,a.y / b,a.z / b)
    else
        return a
    end
end

vector3.__eq = function(a,b)
    local v = a - b
    local length = vector3.sqMagnitude(v)
    return length < 1e-10
end

vector3.__unm = function(a)
    return vector3.new(a.x * -1,a.y * -1,a.z * -1)
end

vector3.__tostring = function(a)
    local str = table.concat({'(x = ',a.x,' y = ',a.y,' z = ',a.z,' )'},'')
    return str
end

---@type vector3
_G["vector3"] = vector3