---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yangfan
--- DateTime: 2021/11/16 14:47
---二维向量类


local setmetatable = setmetatable
local luaMath = math
local getLuaDataType = type

---@class vector2
---@field x number
---@field y number
local vector2 = {
    __type = 'vector2'
}

---@public
---@param x number
---@param y number
---@param z number
---@return vector2
function vector2.new(x,y)
    local vec2 = {
        x = x,
        y = y
    }
    setmetatable(vec2,vector2)
    return vec2
end

---@public
---@return vector2
function vector2.zero()
    return vector2.new(0,0)
end

---@public
---@return vector2
function vector2.one()
    return vector2.new(1,1)
end

---@public
---@return vector2
function vector2.up()
    return vector2.new(0,1)
end

---@public
---@return vector2
function vector2.down()
    return vector2.new(0,-1)
end

---@public
---@return vector2
function vector2.right()
    return vector2.new(1,0)
end

---@public
---@return vector2
function vector2.left()
    return vector2.new(-1,0)
end

---@public 点乘
---@param vec1 vector2
---@param vec2 vector2
---@return number
function vector2.dot(vec1,vec2)
    return vec1.x * vec2.x + vec1.y * vec2.y
end

---@public 叉乘
---@param vec1 vector2
---@param vec2 vector2
---@return number
function vector2.cross(vec1,vec2)
    return vec1.x * vec2.y - vec1.y * vec2.x
end

---@public 标准化
---@param vector vector2
---@return vector2
function vector2.normalize(vector)
    local length = vector2.magnitude(vector)
    return vector / length
end

---@public
---@param vector vector2
---@return number
function vector2.sqMagnitude(vector)
    return vector.x * vector.x + vector.y * vector.y
end

---@public
---@param vector vector2
---@return number
function vector2.magnitude(vector)
    local sqMagnitude = vector.x * vector.x + vector.y * vector.y
    return luaMath.sqrt(sqMagnitude)
end

---@public
---@return vector3
function vector2:toVector3()
    return vector3.new(self.x,self.y,0)
end

---@public
---@return vector4
function vector2:toVector4()
    return vector4.new(self.x,self.y,0,0)
end

-------------运算符重载------------------------------

vector2.__index = vector2

vector2.__add = function(a,b)
    return vector2.new(a.x + b.x,a.y + b.y)
end

vector2.__sub = function(a,b)
    return vector2.new(a.x - b.x,a.y - b.y)
end

--重载乘法运算，只支持与标量的乘法
vector2.__mul = function(a,b)
    if getLuaDataType(a) == 'number' then
        return vector2.new(b.x * a,b.y * a)
    elseif getLuaDataType(b) == 'number' then
        return vector2.new(a.x * b,a.y * b)
    else
        return a
    end
end

--重载除法运算，只支持与标量的除法
vector2.__div = function(a,b)
    if getLuaDataType(a) == 'number' then
        if a == 0 then a = 1 end
        return vector2.new(b.x / a,b.y / a)
    elseif getLuaDataType(b) == 'number' then
        if b == 0 then b = 1 end
        return vector2.new(a.x / b,a.y / b)
    else
        return a
    end
end

vector2.__eq = function(a,b)
    local v = a - b
    local length = vector2.sqMagnitude(v)
    return length < 1e-10
end

vector2.__unm = function(a)
    return vector2.new(a.x * -1,a.y * -1)
end

vector2.__tostring = function(a)
    local str = table.concat({'(x = ',a.x,' y = ',a.y,' )'},'')
    return str
end

---@type vector2
_G["vector2"] = vector2