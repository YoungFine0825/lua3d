---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yangfan
--- DateTime: 2021/11/19 9:52
---简易的逐像素BlinnPhong光照模型

local vertexLayoutIdx = VertexLayoutIndex

local vector3 = vector3
local luaMath = math

---@class ShaderTest : Shader
local ShaderTest = declareClass("ShaderTest",classLib.Shader)

function ShaderTest:ctor()

end

---@public
---@param renderer Renderer
function ShaderTest:SetRenderState(renderer)
    renderer:EnableAlphaBlend(false)
end

---@private
---@return VertexShaderOutput
function ShaderTest:VertexShader()
    local worldPos = self:GetVertexDataVec3(vertexLayoutIdx.worldPos)
    local clipPos = self.mvpMatrix * worldPos--将顶点从世界空间换到裁剪空间
    --
    local normal = self:GetVertexDataVec3(VertexLayoutIndex.normal)
    local normalRotate = self:GetMatrix4x4("normalRotateMat")
    normal = normalRotate * normal--旋转法线
    --
    local uv = self:GetVertexDataVec2(vertexLayoutIdx.uv)
    --
    ---@type VertexShaderOutput
    local o = {
        clipPos = clipPos,
        worldPos = worldPos,
        normal = vector3.new(normal.x,normal.y,normal.z),
        uv = uv
    }
    return o
end

---@private
---@param input FragmentShaderInput
---@return number,number,number,number r,g,b,a
function ShaderTest:FragmentShader(input)
    local uv = input.uv
    local albedo = self:SampleTex2d('albedo',uv)
    --
    local lightDir = self:GetVector3('lightDir')
    local inverseLightDir = vector3.normalize(lightDir * -1)
    local lightIntensity = self:GetNumber('lightIntensity')
    local lightColor = self:GetColor('lightColor') * lightIntensity
    --
    local normal = vector3.normalize(input.normal)
    --计算漫反射辐照度 (兰伯特漫反射定理: 该点的法线与光照方向的点乘即为该点的漫反射辐照度)
    local diffuse = vector3.dot(normal,inverseLightDir)
    --点乘的结果的范围为-1 ~ 1，如果直接用，那么渲染结果就是模型没有被光直接照射的部分(点乘值小于等于0的像素)完全黑。
    --所以这里将值映射到0~1的范围，即半兰伯特漫反射。这样没有被光照直接照射的部分就不会完全黑，而是相对较暗，相当于被环境光照射。
    diffuse = diffuse * 0.5 + 0.5
    --计算高光
    local viewPoint = self:GetVector3('viewPoint')
    local viewDir = vector3.normalize(viewPoint - input.worldPos)
    local halfV = vector3.normalize(viewDir + inverseLightDir)
    local gloss = self:GetNumber('gloss')
    local specular = luaMath.pow( luaMath.max(0,vector3.dot(halfV,normal)),gloss)
    local specularColor = lightColor * specular
    ---计算像素最终颜色
    ---@type Color
    local finalColor = albedo* lightColor * diffuse + specularColor * specular
    return finalColor.r,finalColor.g,finalColor.b,1
end

return ShaderTest