---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yangfan
--- DateTime: 2021/11/21 18:03
---

require("app/const")
require("app/classlib")
require("app/mathlib")
require("app/render")

require("app/shadertest")
require("app/vertexobjecthelper")

--
local bgColor = Color.raywhite
local winWid = SCREEN_WIDTH
local winHei = SCREEN_HEIGHT

---@type ShaderTest
local shader = classLib.ShaderTest.new()

local near = 0.1
local far = 10
local fov = 60
local aspect = winWid / winHei


local cubeTrans = matrix4x4.identity()
local cubeRotate = matrix4x4.identity()
local cubeYaw = 0

---@class AppRoot
---@field renderer Renderer
---@field textureMgr TextureManager
local AppRoot = declareClass("AppRoot")

function AppRoot:ctor()
    ---@type Renderer
    self.renderer = classLib.Renderer.new()
    ---@type TextureManager
    self.textureMgr = classLib.TextureManager.new()
    ---
    self.deltaTime = 0
end

---@public
function AppRoot:Init()
    self.renderer:Init(PIXEL_WIDTH,PIXEL_HEIGHT)
    --
    self.textureMgr:Init()
end

---@public
function AppRoot:OnLoad()
    ---@type VertexObject
    local plyModel = VertexObjectHelper.LoadFromPLY('res/tangdao.ply')
    local texId,texData = self.textureMgr:LoadTexture('res/tangdao.png')
    --
    self.renderer:BindVertexObject(plyModel)
    local projectionMat = matrix4x4.perspective(math.rad(fov),aspect,near,far)
    self.renderer:SetProjectionMatrix(projectionMat)
    --
    shader:SetVector3('lightDir',vector3.new(1,0,0))
    shader:SetColor('lightColor',Color.white)
    shader:SetNumber('lightIntensity',0.9)
    shader:SetVector3('viewPoint',vector3.zero())
    --
    shader:SetTexture2d('diffuseTex',texData)
    shader:SetNumber('texCoordYDir',0)
    --
    self.renderer:BindShader(shader)
end

---@public
function AppRoot:OnUpdate(dt)
    self.deltaTime = self.deltaTime + dt
    --
    cubeTrans[2][4] = -1.5
    cubeTrans[3][4] = -1
    ------
    cubeYaw = cubeYaw + 10 * dt
    local angleInRad = math.rad(cubeYaw)
    cubeRotate[1][1] = math.cos(angleInRad)
    cubeRotate[3][1] = math.sin(angleInRad)
    cubeRotate[1][3] = math.sin(angleInRad) * -1
    cubeRotate[3][3] = math.cos(angleInRad)
    --
    self.renderer:SetViewMatrix(cubeTrans * cubeRotate)
    --
    shader:SetMatrix4x4('normalRotateMat',cubeRotate)
end

---@public
function AppRoot:OnRendering()
    --
    self.renderer:ClearPixelBuffer(bgColor)
    --
    self.renderer:Draw()
    --
    self.renderer:OutputPixelBuffer(winWid,winHei)
end

return AppRoot